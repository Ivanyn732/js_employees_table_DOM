{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar tableHeaders = document.querySelectorAll(\"th\");\nvar rowsArray = Array.from(document.querySelectorAll(\"tbody tr\"));\nvar sortDirection = {};\nfunction formatSalary(cellValue) {\n    return parseFloat(cellValue.replace(/[$,]/g, \"\"));\n}\nfunction sortRows(index, isAscending, rowsArr) {\n    return rowsArr.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[index].textContent.trim();\n        var cellB = rowB.cells[index].textContent.trim();\n        if (index === 4) {\n            var salaryA = formatSalary(cellA);\n            var salaryB = formatSalary(cellB);\n            return isAscending ? salaryA - salaryB : salaryB - salaryA;\n        } else return isAscending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);\n    });\n}\nfunction updateTable(sortedRows) {\n    var tbody = document.querySelector(\"tbody\");\n    tbody.innerHTML = \"\";\n    sortedRows.forEach(function(row) {\n        return tbody.appendChild(row);\n    });\n}\nfunction handleHeaderClick(index, arraySort, directionSort) {\n    var isAscending = directionSort[index];\n    var sortedRows = sortRows(index, isAscending, arraySort);\n    updateTable(sortedRows);\n    directionSort[index] = !isAscending;\n}\ntableHeaders.forEach(function(header, index) {\n    sortDirection[index] = true;\n    header.addEventListener(\"click\", function() {\n        handleHeaderClick(index, rowsArray, sortDirection);\n    });\n});\nvar rows = document.querySelectorAll(\"tbody tr\");\nrows.forEach(function(row) {\n    row.addEventListener(\"click\", function() {\n        rows.forEach(function(r) {\n            return r.classList.remove(\"active\");\n        });\n        row.classList.add(\"active\");\n    });\n});\nvar formHTML = '\\n  <form class=\"new-employee-form\">\\n    <label>\\n      Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required>\\n    </label>\\n    <label>\\n      Position: <input name=\"position\" type=\"text\" data-qa=\"position\">\\n    </label>\\n    <label>\\n      Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required>\\n    </label>\\n    <label>\\n      Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\\n    </label>\\n    <label>\\n      Office:\\n      <select name=\"office\" data-qa=\"office\">\\n        <option value=\"Tokyo\">Tokyo</option>\\n        <option value=\"Singapore\">Singapore</option>\\n        <option value=\"London\">London</option>\\n        <option value=\"New York\">New York</option>\\n        <option value=\"Edinburgh\">Edinburgh</option>\\n        <option value=\"San Francisco\">San Francisco</option>\\n      </select>\\n    </label>\\n    <button type=\"submit\">Save to table</button>\\n  </form>\\n';\ndocument.body.insertAdjacentHTML(\"beforeend\", formHTML);\nvar form = document.querySelector(\".new-employee-form\");\nform.addEventListener(\"submit\", function(e) {\n    e.preventDefault();\n    validateForm();\n});\nfunction validateForm() {\n    var nameEmployee = form.elements.name.value;\n    var position = form.elements.position.value;\n    var office = form.elements.office.value;\n    var age = parseInt(form.elements.age.value, 10);\n    var salary = parseFloat(form.elements.salary.value);\n    var validationError = validateEmployeeDetails(nameEmployee, position, age, salary);\n    if (validationError) {\n        showNotification(\"Error\", validationError, \"error\");\n        return;\n    }\n    addEmployeeToTable(nameEmployee, position, office, age, salary);\n    showNotification(\"Success\", \"Employee added successfully!\", \"success\");\n}\nfunction validateEmployeeDetails(nameWorker, position, age, salary) {\n    if (nameWorker.length < 4) return \"Name must be at least 4 characters long.\";\n    if (!position) return \"Please choose a valid position.\";\n    if (age < 18 || age > 90) return \"Age must be between 18 and 90.\";\n    if (isNaN(salary) || salary <= 0) return \"Salary must be a positive number.\";\n    return null;\n}\nfunction showNotification(title, message, type) {\n    var notification = document.createElement(\"div\");\n    notification.classList.add(\"notification\", type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.innerHTML = '\\n    <span class=\"title\">'.concat(title, \"</span>\\n    <span>\").concat(message, \"</span>\\n  \");\n    document.body.appendChild(notification);\n    setTimeout(function() {\n        notification.style.visibility = \"hidden\";\n    }, 1000);\n}\nfunction addEmployeeToTable(nameEmployee, position, office, age, salary) {\n    var tbody = document.querySelector(\"tbody\");\n    var newRow = document.createElement(\"tr\");\n    newRow.innerHTML = \"\\n    <td>\".concat(nameEmployee, \"</td>\\n    <td>\").concat(position, \"</td>\\n    <td>\").concat(office, \"</td>\\n    <td>\").concat(age, \"</td>\\n    <td>$\").concat(salary.toLocaleString(\"en-US\"), \"</td>\\n  \");\n    tbody.appendChild(newRow);\n    form.reset();\n}\n\n//# sourceMappingURL=index.ffb92a92.js.map\n","'use strict';\n\nconst tableHeaders = document.querySelectorAll('th');\nconst rowsArray = Array.from(document.querySelectorAll('tbody tr'));\nconst sortDirection = {};\n\nfunction formatSalary(cellValue) {\n  return parseFloat(cellValue.replace(/[$,]/g, ''));\n}\n\nfunction sortRows(index, isAscending, rowsArr) {\n  return rowsArr.sort((rowA, rowB) => {\n    const cellA = rowA.cells[index].textContent.trim();\n    const cellB = rowB.cells[index].textContent.trim();\n\n    if (index === 4) {\n      const salaryA = formatSalary(cellA);\n      const salaryB = formatSalary(cellB);\n\n      return isAscending ? salaryA - salaryB : salaryB - salaryA;\n    } else {\n      return isAscending\n        ? cellA.localeCompare(cellB)\n        : cellB.localeCompare(cellA);\n    }\n  });\n}\n\nfunction updateTable(sortedRows) {\n  const tbody = document.querySelector('tbody');\n\n  tbody.innerHTML = '';\n\n  sortedRows.forEach((row) => tbody.appendChild(row));\n}\n\nfunction handleHeaderClick(index, arraySort, directionSort) {\n  const isAscending = directionSort[index];\n\n  const sortedRows = sortRows(index, isAscending, arraySort);\n\n  updateTable(sortedRows);\n\n  directionSort[index] = !isAscending;\n}\n\ntableHeaders.forEach((header, index) => {\n  sortDirection[index] = true;\n\n  header.addEventListener('click', () => {\n    handleHeaderClick(index, rowsArray, sortDirection);\n  });\n});\n\nconst rows = document.querySelectorAll('tbody tr');\n\nrows.forEach((row) => {\n  row.addEventListener('click', () => {\n    rows.forEach((r) => r.classList.remove('active'));\n\n    row.classList.add('active');\n  });\n});\n\nconst formHTML = `\n  <form class=\"new-employee-form\">\n    <label>\n      Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required>\n    </label>\n    <label>\n      Position: <input name=\"position\" type=\"text\" data-qa=\"position\">\n    </label>\n    <label>\n      Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required>\n    </label>\n    <label>\n      Salary: <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\n    </label>\n    <label>\n      Office:\n      <select name=\"office\" data-qa=\"office\">\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n    <button type=\"submit\">Save to table</button>\n  </form>\n`;\n\ndocument.body.insertAdjacentHTML('beforeend', formHTML);\n\nconst form = document.querySelector('.new-employee-form');\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  validateForm();\n});\n\nfunction validateForm() {\n  const nameEmployee = form.elements.name.value;\n  const position = form.elements.position.value;\n  const office = form.elements.office.value;\n  const age = parseInt(form.elements.age.value, 10);\n  const salary = parseFloat(form.elements.salary.value);\n\n  const validationError = validateEmployeeDetails(\n    nameEmployee,\n    position,\n    age,\n    salary,\n  );\n\n  if (validationError) {\n    showNotification('Error', validationError, 'error');\n\n    return;\n  }\n\n  addEmployeeToTable(nameEmployee, position, office, age, salary);\n  showNotification('Success', 'Employee added successfully!', 'success');\n}\n\nfunction validateEmployeeDetails(nameWorker, position, age, salary) {\n  if (nameWorker.length < 4) {\n    return 'Name must be at least 4 characters long.';\n  }\n\n  if (!position) {\n    return 'Please choose a valid position.';\n  }\n\n  if (age < 18 || age > 90) {\n    return 'Age must be between 18 and 90.';\n  }\n\n  if (isNaN(salary) || salary <= 0) {\n    return 'Salary must be a positive number.';\n  }\n\n  return null;\n}\n\nfunction showNotification(title, message, type) {\n  const notification = document.createElement('div');\n\n  notification.classList.add('notification', type);\n  notification.setAttribute('data-qa', 'notification');\n\n  notification.innerHTML = `\n    <span class=\"title\">${title}</span>\n    <span>${message}</span>\n  `;\n  document.body.appendChild(notification);\n\n  setTimeout(() => {\n    notification.style.visibility = 'hidden';\n  }, 1000);\n}\n\nfunction addEmployeeToTable(nameEmployee, position, office, age, salary) {\n  const tbody = document.querySelector('tbody');\n  const newRow = document.createElement('tr');\n\n  newRow.innerHTML = `\n    <td>${nameEmployee}</td>\n    <td>${position}</td>\n    <td>${office}</td>\n    <td>${age}</td>\n    <td>$${salary.toLocaleString('en-US')}</td>\n  `;\n\n  tbody.appendChild(newRow);\n  form.reset();\n}\n"],"names":["tableHeaders","document","querySelectorAll","rowsArray","Array","from","sortDirection","formatSalary","cellValue","parseFloat","replace","forEach","header","index","addEventListener","isAscending","sortedRows","tbody","directionSort","rowsArr","sort","rowA","rowB","cellA","cells","textContent","trim","cellB","localeCompare","salaryA","salaryB","querySelector","innerHTML","row","appendChild","rows","r","classList","remove","add","body","insertAdjacentHTML","form","showNotification","title","message","type","notification","createElement","setAttribute","concat","setTimeout","style","visibility","e","preventDefault","validateForm","newRow","nameEmployee","elements","name","value","position","office","age","parseInt","salary","validationError","nameWorker","length","isNaN","toLocaleString","reset"],"version":3,"file":"index.ffb92a92.js.map"}